using System;
using System.Reflection.Metadata;
using System.Runtime.Versioning;

public class Program
{
    
    private static void Main(string[] args)
    {
       // Console.WriteLine("Exercise 1");
        //Exercise1();

       // Console.WriteLine("Exercise 2");
       // Exercise2();

        //Console.WriteLine("Exercise 3");
       // Exercise3();

        Console.WriteLine("Exercise 4");
        Exercise4();

       Console.WriteLine("Exercise 5");
       Exercise5();
    }

    //
    // Write a program that reads a number from the keyboard. Check whether that number is divisible by 7 and 11 or not.
    // Testdata: 16324 is divisible by both 7 and 11
    private static void Exercise1()
    {
        Console.WriteLine("Enter a number:");
        int keyboardNumber = Convert.ToInt32(Console.ReadLine());
        if (keyboardNumber % 7 == 0 && keyboardNumber % 11 == 0)
        {
            Console.WriteLine("The number you have entered is divisible by both 7 and 11!");
        }
        else
        {
            Console.WriteLine("The number you have entered is not divisible by both 7 and 11");
        }
    }

    //
    //Check whether a given year is leap year or not.
    //Testdata: 1997 and 2012
    private static void Exercise2()
    {
        Console.WriteLine("Enter a number:");
        int year = Convert.ToInt32(Console.ReadLine());
        if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))
        {
            Console.WriteLine("The year you have entered is a leap year, congrats!");
        }
        else
        {
            Console.WriteLine("The year you have entered is not a leap year :(");
        }

    }

    //
    //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 47th prime number?
    //
    // returns true if number is prime and false if otherwise
    public static bool IsPrime(int number)
    {
        if (number < 2)
        {
            return false;
        }

        for (int i = 2; i <= Math.Sqrt(number); i++)
        {
            if (number % i == 0)
            {
                return false;
            }

        }

        return true;



    }
    private static void Exercise3()
    {
        int fourtyseventh = 47;  
        int firstPrimeNumber = 1;  
        int num = 1;  

        while (firstPrimeNumber < fourtyseventh)
        {
            if (IsPrime(num))
            {
                firstPrimeNumber++;
            }
            num += 2;
        }
        Console.WriteLine("The " + fourtyseventh + "th prime number is " + (num - 2));

    }

    //
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    // By considering the terms in the Fibonacci sequence whose values do not exceed 1000, find the sum of the even-valued terms.
    private static void Exercise4()
    {
        int limit = 1000;
        int sum = 0;
        int firstNumber = 1;
        int secondNumber = 2;
        int current = firstNumber + secondNumber;

        while (current <= limit)
        {
            if (current % 2 == 0)
            {
                sum += current;
            }
            firstNumber = secondNumber;
            secondNumber = current;
            current = firstNumber + secondNumber;
        }

        Console.WriteLine("The sum of even valued terms is " + sum);
    }

    //
    // Find the sum of digits of a number read from the keyboard.
    //
    public static void Exercise5()
    {
        Console.Write("Enter a number: ");
        int number = int.Parse(Console.ReadLine());

        int sum = 0;
        while (number > 0)
        {
            int digit = number % 10;
            sum += digit;
            number /= 10;
        }

        Console.WriteLine("The sum of the digits is " + sum);
    }
}



























